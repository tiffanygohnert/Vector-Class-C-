#ifndef  VECTOR_H
#define VECTOR_H
#include <cassert>
#include <iostream>
using namespace std;
// forward declaration for ContainerIterator
template <class T>
class VectorIterator;

//vector class
template <class T>
class Vector
{
 
  public: 

   //default constructor 
  Vector():  Size(0),Capacity(0), vector(0x00000000){} 
  
   //destructor
   ~Vector()
   { if (Capacity) delete [] vector; }
   
   //non-default constructor Needed for test 1
   Vector(int capacity) throw (const char *);
 
  //copy constructor
Vector(const Vector& rhs)throw (const char *); 

//empty()
   bool empty()const
     {
        return Size ==0;  
     }
//clear()
   void clear()
   {Size =0; }

   //size()
    int size()const//needed to pass test 1
    {
       return Size; 
       // return sizeof(Size); 
 
    }
   //capacity()
  int capacity()const
   {
      
  
return Capacity; //need to pass test 1
   }

  void insert(const T & t) throw (const char*);

//push_back
  void push_back(T &capacity)
  {
     Size = (Size+1); 
     if (Size !=0)
     { Capacity = (((Size / 2)*2)+2);} 
     else
     {Capacity =1; }
// if (Size ==0)
     // {capacity = 1;
     //    capacity=Capacity; 
           //   Size = (Size +1);
     // }
     
     // else
     // {        Capacity ==(capacity*2);

         // Size = (Size +1);
     // }

//     assert (Capacity >0);
     //   int *p = new(nothrow)int [Capacity];
     // if(!p)
     // cout << "Unable to allocate a new buffer for Vector"; 
     
     }
  // return an iterator to the beginning of the list
    VectorIterator <T> begin() { return VectorIterator<T>(vector); }

    // return an iterator to the end of the list
    VectorIterator <T> end() { return VectorIterator<T>(vector + Size);};
//operator=
//    T & Vector operator[](at(int)){return int&};
//    double &  Vector <T> :: operator[](int index); 

    // T & std::Vector <T> :: at(int){};
       T & operator [](int& index) throw(char)
    {
       if (Capacity < 0 || Capacity >= Size)
          throw "ERROR: Invalid index";
       return vector[index];
    }

 
//operator()
       T & operator ()(float size, float capacity=0)
              {
          return vector[Capacity];   
       }
//operator =
       T &  operator == (const Vector & rhs)const
       {
          return ((size()   == rhs.size()  ) &&
                  (capacity() == rhs.capacity())
                   );
       }

  public:

 int Size;
T * vector; 
int Capacity; 
 
}; 

//iterator class
template <class T> 
class VectorIterator
{
public:
    // default constructor
   VectorIterator() : p(0x00000000) {}

    // initialize to direct p to some item
   VectorIterator(T * p) : p(p) {}

    // copy constructor
    VectorIterator(const VectorIterator & rhs) { *this = rhs; }

    // assignment operator
    VectorIterator & operator = (const VectorIterator & rhs)
    {
       this->p = rhs.p;
       return *this;
    }

    // not equals operator
    bool operator != (const VectorIterator & rhs) const
    {
       return rhs.p != this->p;
    }

    // dereference operator
    T & operator * ()
    {
       return *p;
    }

    // prefix increment
    VectorIterator <T> & operator ++ ()
    {
       p++;
       return *this;
    }

    // postfix increment
    VectorIterator <T> operator++(int postfix)
    {
       VectorIterator tmp(*this);
       p++;
       return tmp;
    }
    
   private:
    T * p;
   

};

/**********************************************
 * CONTAINER : NON-DEFAULT CONSTRUCTOR
 * Preallocate the container to "capacity"
 **********************************************/
template <class T>
Vector <T> :: Vector(int capacity) throw (const char *)
{
   assert(capacity >= 0);

   // do nothing if there is nothing to do
   if (Size == 0)
   {
      this->Capacity = this->Size = 0;
      this->vector = 0x00000000;
      return;
   }

   // attempt to allocate
          try
          {
             vector = new T[capacity];
          }
          catch (std::bad_alloc)
          {
             throw "ERROR: Unable to allocate buffer";
          }


          // copy over the stuff
          this->Capacity = capacity;
          this->Size = 0;
}

/*******************************************
 * CONTAINER :: COPY CONSTRUCTOR
 *******************************************/
template <class T>
Vector <T> :: Vector(const Vector <T> & rhs) throw (const char *)
{
   assert(rhs.Capacity >= 0);

   // do nothing if there is nothing to do
   if (rhs.Capacity == 0)
   {
      Capacity = Size = 0;
      vector = 0x00000000;
      return;
   }

   // attempt to allocate
       try
       {
          vector = new T[rhs.Capacity];
       }
       catch (std::bad_alloc)
       {
          throw "ERROR: Unable to allocate buffer";
       }

       // copy over the stuff
       assert(rhs.Size >= 0 && rhs.Size <= rhs.Capacity);
       Capacity = rhs.Capacity;
       Size = rhs.Size;
       for (int i = 0; i < Size; i++)
          vector[i] = rhs.vector[i];
}

/***************************************************
 * CONTAINER :: INSERT
 * Insert an item on the end of the container
 **************************************************/
template <class T>
void Vector <T> :: insert(const T & t) throw (const char *)
{
   // do we have space?
   if (Capacity == 0 || Capacity == Size)
      throw "ERROR: Insufficient space";

   // add an item to the end
   vector[Size++] = t;
}

#endif
